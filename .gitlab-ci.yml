variables:
  TEST_RUNNER_CONTAINER: ${REGISTRY_HOST}/beckhoff/test_stage/test_runner:v4.133
  BHF_CI_TEST_STAGE_GIT_REF: v4.133

image: ${REGISTRY_HOST}/beckhoff/bdpg:v1.3.1

stages:
  - .pre
  - build
  - test
  - release-push

cache:
  paths:
  - apt-cache/

codestyle:
  stage: build
  tags:
    - arm64
    - docker-v2
  before_script:
    - apt update -y && apt install -y uncrustify
    - uncrustify -v
  script:
    - ./tools/run-uncrustify.sh check
  rules:
    - if: $BHF_CI_SKIP_CODESTYLE == "y"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: on_success

docker-image:
  image: ${CI_REGISTRY}/beckhoff/okinak:master
  stage: .pre
  parallel:
    matrix:
      - BHF_CI_ARCH:
        - amd64
  tags:
    - ${BHF_CI_ARCH}
    - docker-v2-privileged
  script:
    - okinak build-native

.build-meson:
  stage: build
  script:
    - meson setup build ${BHF_CI_MESON_OPTIONS}
    - ninja -C build
    - meson setup example/build example ${BHF_CI_MESON_OPTIONS}
    - ninja -C example/build
  artifacts:
    when: always
    paths:
    - AdsLib/**/*.h
    - build/
    - example/build/

.build-meson-docker:
  extends: .build-meson
  tags:
    - amd64
    - docker-v2

build-arch:
  extends: .build-meson-docker
  image: ${DOCKER_PROXY}archlinux:base-devel
  parallel:
    matrix:
      - CXX:
        - clang++
        - g++
  before_script:
    - pacman --noconfirm --refresh --sync --sysupgrade clang meson

build-alpine:
  extends: .build-meson-docker
  image: ${DOCKER_PROXY}alpine:3.21.0
  before_script:
    - apk add g++ meson

build-cmake:
  stage: build
  tags:
    - amd64
    - docker-v2
  before_script:
    - apt-get update && apt-get --assume-yes install cmake
  script:
    - cmake -S . -B build
    - cmake --build build
  artifacts:
    when: always
    paths:
    - AdsLib/**/*.h
    - build/

build-linux-clang:
  extends: .build-meson-docker
  variables:
    CXX: clang++
  before_script:
    - apt-get update && apt-get --assume-yes install clang meson

build-fbsd-clang:
  extends: .build-meson
  tags:
    - tcbsd_poudriere
  before_script:
    - doas pkg install -y meson
    # we dont limit grep --max-count=1, because curl would complain if grep closes the pipe
    - curl https://tcbsd.beckhoff.com/TCBSD/13/stable/packages/All/ | grep --only-matching -e "href='.*ADS-Comm-Lib.*'" | cut -d "'" -f 2 | xargs -I{} fetch https://tcbsd.beckhoff.com/TCBSD/13/stable/packages/All/{}
    - doas pkg install -y -f TF6000-ADS-Comm-Lib-*
  variables:
    BHF_CI_MESON_OPTIONS: '-Dtcadsdll_include=/usr/local/include -Dtcadsdll_lib=/usr/local/lib'

build-linux-gcc:
  extends: .build-meson-docker
  parallel:
    matrix:
      - BHF_CI_ARCH:
        - amd64
        - arm64
  tags:
    - ${BHF_CI_ARCH}
    - docker-v2
  variables:
    BHF_CI_MESON_OPTIONS: '-Dtcadsdll_include=/usr/include -Dtcadsdll_lib=/usr/lib'
  before_script:
    - apt-get update && apt-get --assume-yes install libadscomm-dev meson

build-linux-gcc-i386:
  extends: .build-meson-docker
  variables:
    BHF_CI_MESON_OPTIONS: '--cross-file meson.cross.amd64-linux.i386'
  before_script:
    - apt-get update && apt-get --assume-yes install libc6-dev-i386 g++-multilib meson

build-linux-gcc-mips:
  extends: .build-meson-docker
  variables:
    BHF_CI_MESON_OPTIONS: '--cross-file meson.cross.amd64-linux.mips'
  before_script:
    - apt-get update && apt-get --assume-yes install g++-mips-linux-gnu meson

build-linux-gcc-riscv64:
  extends: .build-meson-docker
  variables:
    BHF_CI_MESON_OPTIONS: '--cross-file meson.cross.amd64-linux.riscv64'
  before_script:
    - apt-get update && apt-get --assume-yes install g++-riscv64-linux-gnu meson

build-mxe:
  extends: .build-meson-docker
  image: ${REGISTRY_HOST}/beckhoff/docker-mxe:40549
  variables:
    BHF_CI_MESON_OPTIONS: '--cross-file meson.cross.amd64-linux.win32 -Dcpp_std=c++14 -Db_pie=false'

build-win10:
  stage: build
  tags:
    - MD_VS_GUI_TCPKG_TC
  script:
    - $env:CI_COMMIT_MESSAGE = $null
    - $env:CI_COMMIT_DESCRIPTION = $null
    - $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    - $prog_x86 = [System.Environment]::GetFolderPath('ProgramFilesX86'); $vswhere = "${prog_x86}\Microsoft Visual Studio\Installer\vswhere.exe"; $vsInstallPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath; Import-Module "$vsInstallPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"; Enter-VsDevShell -VsInstallPath:$vsInstallPath -SkipAutomaticLocation -DevCmdArguments:'-arch=x64 -host_arch=x64'
    - meson setup build -Dwerror=false -Dcpp_args="-D_CRT_NONSTDC_NO_WARNINGS=1, -D_CRT_SECURE_NO_WARNINGS=1, -DNOMINMAX=1" -Dtcadsdll_include="c:\Program Files (x86)\Beckhoff\TwinCAT\AdsApi\TcAdsDll\Include" -Dtcadsdll_lib="c:\Program Files (x86)\Beckhoff\TwinCAT\AdsApi\TcAdsDll\lib\x64"
    - ninja -C build
    - meson setup example/build example -Dwerror=false -Dcpp_args="-D_CRT_NONSTDC_NO_WARNINGS=1, -D_CRT_SECURE_NO_WARNINGS=1, -DNOMINMAX=1" -Dtcadsdll_include="c:\Program Files (x86)\Beckhoff\TwinCAT\AdsApi\TcAdsDll\Include" -Dtcadsdll_lib="c:\Program Files (x86)\Beckhoff\TwinCAT\AdsApi\TcAdsDll\lib\x64"
    - ninja -C example/build
  artifacts:
    when: always
    paths:
    - AdsLib/**/*.h
    - build/
    - example/build/

.test-with-service-container:
  stage: test
  image: ${TEST_RUNNER_CONTAINER}
  variables:
    CI_DEBUG_SERVICES: 'true'
  tags:
    - amd64
    - few_vcpus
    - vm-runner
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}-amd64"
      alias: ads-server
      variables:
        TCSYSTEMSERVICEUM_LOG: '/builds/service-container-${CI_JOB_ID}/ads-server.log'
  after_script:
    - mkdir -p .test-stage/reports/
    - cp -a /builds/service-container-${CI_JOB_ID}/* .test-stage/reports/
  artifacts:
    when: always
    paths:
    - .test-stage/reports/*

.test-linux:
  extends: .test-with-service-container
  script:
    - apt update -y && apt install -y socat xxd
    - ./tools/90_run_tests.sh

test-linux-clang:
  extends: .test-linux
  needs: [
    "build-linux-clang",
  ]

test-linux-gcc-amd64:
  extends: .test-linux
  needs:
    - job: build-linux-gcc
      parallel:
        matrix:
          - BHF_CI_ARCH: amd64

test-linux-gcc-i386:
  extends: .test-linux
  needs: [
    "build-linux-gcc-i386",
  ]
  before_script:
    - rm /etc/apt/sources.list.d/*
    - printf 'deb https://deb.debian.org/debian bookworm main contrib non-free-firmware\n' > /etc/apt/sources.list.d/i386.list
    - dpkg --add-architecture i386
    - apt update -y && apt install -y libc6:i386 libstdc++6:i386

test-linux-gcc-mips:
  extends: .test-linux
  needs: [
    "build-linux-gcc-mips",
  ]
  variables:
    QEMU_LD_PREFIX: '/usr/mips-linux-gnu'
    QEMU_USER_EMULATION: 'qemu-mips'
  before_script:
    - apt update -y && apt install -y binfmt-support libstdc++-dev-mips-cross qemu-user-binfmt

test-linux-gcc-riscv64:
  extends: .test-linux
  needs: [
    "build-linux-gcc-riscv64",
  ]
  variables:
    QEMU_LD_PREFIX: '/usr/riscv64-linux-gnu'
    QEMU_USER_EMULATION: 'qemu-riscv64'
  before_script:
    - apt update -y && apt install -y binfmt-support libstdc++-dev-riscv64-cross qemu-user-binfmt

test-fbsd-clang:
  extends: .test-with-service-container
  needs: [
    "build-fbsd-clang",
  ]
  script:
    - tools/prepare_test_stage.sh
    - rackctl-emulate add test-device 200
    - test_stage/test_stage.sh --config-dir=.test-stage rackctl --install="$(realpath ./*.iso)" test-device & wait $!

build-debian:
  parallel:
    matrix:
      - BHF_CI_ARCH:
        - amd64
        - arm64
  stage: build
  tags:
    - ${BHF_CI_ARCH}
    - docker-v2
  before_script:
    - apt-get update && mk-build-deps --install --remove debian/control
  script:
    - bdpg build
    - bdpg push-pipelines ./debian-release/*.deb
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - ./debian-release

release-push:
  stage: release-push
  dependencies:
    - build-debian
  only:
    refs:
      - master
  script:
    - mkdir -p "/root/.ssh"
    - printf '%s\n' "Host *" > /root/.ssh/config
    - printf '\t%s\n' "StrictHostKeyChecking no" "UserKnownHostsFile /dev/null" >> /root/.ssh/config
    - .ci/publish_debian_package.sh
  allow_failure: true
